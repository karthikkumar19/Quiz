{"version":3,"sources":["components/UI/Button/button.js","container/Auth/Auth.js","components/UI/Spinner/Spinner.js","components/UI/Input/input.js","components/UI/Input/input.module.css","components/UI/Spinner/Spinner.module.css","components/UI/Button/button.module.css","container/Auth/Auth.module.css"],"names":["button","props","disabled","className","classes","Button","btnType","join","onClick","clicked","children","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","switchAuthModeHandler","prevState","submitHandler","preventDefault","onAuth","formElementsArray","key","this","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","Spinner","errorMessage","error","message","authRedirect","isAuthenticated","to","authRedirectPath","onSubmit","Component","connect","auth","token","dispatch","actions","onSetAuthRedirectPath","spinner","Loader","input","inputElement","inputClasses","InputElement","Invalid","onChange","options","option","displayValue","Input","Label","label","module","exports"],"mappings":"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","file":"static/js/5.1b64d9ed.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './button.module.css';\n\nconst button = (props) => (\n    <button\n        disabled={props.disabled}\n        className={[classes.Button, classes[props.btnType]].join(' ')}\n        onClick={props.clicked}>{props.children}</button>\n);\n\nexport default button;","import React, {Component} from 'react';\nimport Input from  '../../components/UI/Input/input';\nimport Button from '../../components/UI/Button/button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../components/UI/Spinner/Spinner';\nimport {connect} from 'react-redux';\nimport {Redirect} from 'react-router-dom';\nimport {updateObject , checkValidity} from '../../shared/utility';\n\nclass Auth extends Component {\n\n    state={\n        controls:{\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Your Password'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength:6\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        isSignup:true\n    }\n\n\n    \n\n    inputChangedHandler = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls,{\n            [controlName]: updateObject(this.state.controls[controlName],{\n                value:event.target.value,\n                valid:checkValidity(event.target.value,this.state.controls[controlName].validation),\n                touched:true\n            }) \n        });\n        this.setState({controls:updatedControls});\n    }\n\n    switchAuthModeHandler = () =>{\n        this.setState(prevState => {\n            return{isSignup: !prevState.isSignup};\n        })\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignup);\n    }\n    \n\n    render(){\n        const formElementsArray = [];\n        for (let key in this.state.controls) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n        let form = formElementsArray.map( formElement => (\n            <Input \n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n        ));\n\n        if(this.props.loading){\n            form = <Spinner/>\n        }\n\n        let errorMessage = null;\n\n        if(this.props.error){\n            errorMessage = (\n                <p>{this.props.error.message}</p>\n            )\n        }\n\n        let authRedirect = null;\n        if(this.props.isAuthenticated){\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return(\n            <div className={classes.Auth}>\n                {authRedirect}\n                {errorMessage}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button clicked={this.switchAuthModeHandler}\n                 btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP' }</Button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading:state.auth.loading,\n        error:state.auth.error,\n        isAuthenticated:state.auth.token != null,\n        authRedirectPath:state.auth.authRedirectPath\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return{\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email,password,isSignup)),\n        onSetAuthRedirectPath : () => dispatch(actions.setAuthRedirectPath('/'))\n\n    };\n};\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth);","import React from 'react';\n\nimport classes from './Spinner.module.css';\n\nconst spinner = () => (\n    <div className={classes.Loader}>Loading...</div>\n);\n\nexport default spinner;","  \nimport React from 'react';\n\nimport classes from './input.module.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div>\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n        </div>\n    );\n\n};\n\nexport default input;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"input_Input__3BPgK\",\"Label\":\"input_Label__24bIE\",\"InputElement\":\"input_InputElement__2HI6E\",\"Invalid\":\"input_Invalid__3QqA4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__1twK-\",\"load2\":\"Spinner_load2__2gkgc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"button_Button__2rvm5\",\"Success\":\"button_Success__2fkNB\",\"Danger\":\"button_Danger__3R9zs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__Bd1Nb\"};"],"sourceRoot":""}